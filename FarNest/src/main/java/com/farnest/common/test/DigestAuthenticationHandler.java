package com.farnest.common.test;

public class DigestAuthenticationHandler /*implements AuthenticationHandler*/ {

	private static final String WWW_AUTHENTICATE = "WWW-Authenticate";	

	private HttpRequestExecutor executor;

	public DigestAuthenticationHandler(){
		this.executor = new HttpRequestExecutor();//TODO: refactor with SPRING
	}

	/**
	 * Handles secure get requests using digest authentication.
	 * @param url URL to access
	 * @param credentials - username/password of the user
	 * @return text representation of the response (json or xml) or null
	 */
	
	
	
	/*
	public String doGetRequest(String url, UsernamePasswordCredentials credentials)  {
		String responseStr = executeRequest(url, credentials, new HttpGet(url));

		return responseStr;
	}
	*/
	
	
	
	
	/**
	 * Handles secure post requests using digest authentication.
	 * @param url URL to access
	 * @param credentials - username/password of the user
	 * @return text representation of the response (json or xml) or null
	 */
	
	
	/*
	public String doPostRequest(String url, UsernamePasswordCredentials credentials)  {
		String responseStr = executeRequest(url, credentials, new HttpPost(url));

		return responseStr;
	}
	*/
	
	
	/**
	 * Handles secure put requests using digest authentication.
	 * @param url URL to access
	 * @param credentials - username/password of the user
	 * @return text representation of the response (json or xml) or null
	 */
	
	
	
	/*
	public String doPutRequest(String url, UsernamePasswordCredentials credentials)  {
		String responseStr = executeRequest(url, credentials, new HttpPut(url));

		return responseStr;
	}
	*/
	
	
	
	
	/**
	 * Handles secure delete requests using digest authentication.
	 * @param url URL to access
	 * @param credentials - username/password of the user
	 * @return text representation of the response (json or xml) or null
	 */
	
	
	
	/*
	public String doDeleteRequest(String url, UsernamePasswordCredentials credentials)  {
		String responseStr = executeRequest(url, credentials, new HttpDelete(url));

		return responseStr;
	}
	*/
	
	
	
	
	/**
	 * Executes a request with a properly formulated digest header.
	 * This method will initially ask the target for a challenge (WWW-Authenticate response header).
	 * Once a challenge is received and processed, another request will be generated with the 
	 * following header:
	 * Authorization: Digest username="username", realm="[realm]", nonce="[nonce]", 
	 * uri="[uri]", response="[response]", qop=auth, nc=00000001, cnonce="[cnonce]".  
	 * All but username and password are provided by the target that issued the challenge (in WWW-Authenticate
	 * response header).
	 * @param url of the request
	 * @param request 
	 * @return - response in json or xml or text format or null
	 * @throws ParseException 
	 * @throws IOException 
	 * @throws ClientProtocolException 
	 */
	
	
	/*
	private String executeRequest(String url, UsernamePasswordCredentials credentials, HttpMessage request)  {
		String responseStr = null;

		try {
			// A org.apache.http.impl.auth.DigestScheme instance is
			// what will process the challenge from the web-server	
			final DigestScheme md5Auth = new DigestScheme();
			// This should return an HTTP 401 Unauthorized with
			// a challenge to solve.
			final HttpResponse authResponse =  executor.execute((HttpUriRequest)request);	

			// Validate that we got an HTTP 401 back			
			if(authResponse.getStatusLine().getStatusCode() ==
				HttpStatus.SC_UNAUTHORIZED) {
				if(authResponse.containsHeader(WWW_AUTHENTICATE)) {
					// Get the challenge.
					final Header challenge =
						authResponse.getHeaders(WWW_AUTHENTICATE)[0];
					// Solve it.
					md5Auth.processChallenge(challenge);

					// Generate a solution Authentication header using your
					// username and password.
					final Header solution = md5Auth.authenticate(
							new UsernamePasswordCredentials(credentials.getUserName(), credentials.getPassword()),
							new BasicHttpRequest(HttpGet.METHOD_NAME,
									new URL(url).getPath()));

					// Do another request, but this time include the solution
					// Authentication header as generated by HttpClient.
					request.addHeader(solution);
					responseStr = executor.executeAndRead((HttpUriRequest)request);					
				} else {
					//TODO: do something other than throw exception
					throw new Exception("Service responded with Http 401, " +
					"but did not send us usable WWW-Authenticate header.");
				}
			} else {
				//TODO: do something other than throw exception
				throw new Exception("Did not get an Http 401 " +
				"like we were expecting.");
			}
		} catch (MalformedChallengeException e) {
			// TODO Auto-generated catch block
			//log.error(e);
		} catch (AuthenticationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClientProtocolException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return responseStr;
	}
	*/
	
}